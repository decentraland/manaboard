// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class StartVote extends EthereumEvent {
  get params(): StartVote__Params {
    return new StartVote__Params(this);
  }
}

export class StartVote__Params {
  _event: StartVote;

  constructor(event: StartVote) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get metadata(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class CastVote extends EthereumEvent {
  get params(): CastVote__Params {
    return new CastVote__Params(this);
  }
}

export class CastVote__Params {
  _event: CastVote;

  constructor(event: CastVote) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get supports(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get stake(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ExecuteVote extends EthereumEvent {
  get params(): ExecuteVote__Params {
    return new ExecuteVote__Params(this);
  }
}

export class ExecuteVote__Params {
  _event: ExecuteVote;

  constructor(event: ExecuteVote) {
    this._event = event;
  }

  get voteId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChangeSupportRequired extends EthereumEvent {
  get params(): ChangeSupportRequired__Params {
    return new ChangeSupportRequired__Params(this);
  }
}

export class ChangeSupportRequired__Params {
  _event: ChangeSupportRequired;

  constructor(event: ChangeSupportRequired) {
    this._event = event;
  }

  get supportRequiredPct(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChangeMinQuorum extends EthereumEvent {
  get params(): ChangeMinQuorum__Params {
    return new ChangeMinQuorum__Params(this);
  }
}

export class ChangeMinQuorum__Params {
  _event: ChangeMinQuorum;

  constructor(event: ChangeMinQuorum) {
    this._event = event;
  }

  get minAcceptQuorumPct(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ScriptResult extends EthereumEvent {
  get params(): ScriptResult__Params {
    return new ScriptResult__Params(this);
  }
}

export class ScriptResult__Params {
  _event: ScriptResult;

  constructor(event: ScriptResult) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get script(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get input(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get returnData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class RecoverToVault extends EthereumEvent {
  get params(): RecoverToVault__Params {
    return new RecoverToVault__Params(this);
  }
}

export class RecoverToVault__Params {
  _event: RecoverToVault;

  constructor(event: RecoverToVault) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Voting__getVoteResult {
  value0: boolean;
  value1: boolean;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: Bytes;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromBoolean(this.value0));
    map.set("value1", EthereumValue.fromBoolean(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    map.set("value6", EthereumValue.fromUnsignedBigInt(this.value6));
    map.set("value7", EthereumValue.fromUnsignedBigInt(this.value7));
    map.set("value8", EthereumValue.fromUnsignedBigInt(this.value8));
    map.set("value9", EthereumValue.fromBytes(this.value9));
    return map;
  }
}

export class Voting extends SmartContract {
  static bind(address: Address): Voting {
    return new Voting("Voting", address);
  }

  hasInitialized(): boolean {
    let result = super.call("hasInitialized", []);

    return result[0].toBoolean();
  }

  try_hasInitialized(): CallResult<boolean> {
    let result = super.tryCall("hasInitialized", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptExecutor(_script: Bytes): Address {
    let result = super.call("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);

    return result[0].toAddress();
  }

  try_getEVMScriptExecutor(_script: Bytes): CallResult<Address> {
    let result = super.tryCall("getEVMScriptExecutor", [
      EthereumValue.fromBytes(_script)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getRecoveryVault(): Address {
    let result = super.call("getRecoveryVault", []);

    return result[0].toAddress();
  }

  try_getRecoveryVault(): CallResult<Address> {
    let result = super.tryCall("getRecoveryVault", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  MODIFY_QUORUM_ROLE(): Bytes {
    let result = super.call("MODIFY_QUORUM_ROLE", []);

    return result[0].toBytes();
  }

  try_MODIFY_QUORUM_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("MODIFY_QUORUM_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getVoterState(_voteId: BigInt, _voter: Address): i32 {
    let result = super.call("getVoterState", [
      EthereumValue.fromUnsignedBigInt(_voteId),
      EthereumValue.fromAddress(_voter)
    ]);

    return result[0].toI32();
  }

  try_getVoterState(_voteId: BigInt, _voter: Address): CallResult<i32> {
    let result = super.tryCall("getVoterState", [
      EthereumValue.fromUnsignedBigInt(_voteId),
      EthereumValue.fromAddress(_voter)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  getVote(_voteId: BigInt): Voting__getVoteResult {
    let result = super.call("getVote", [
      EthereumValue.fromUnsignedBigInt(_voteId)
    ]);

    return new Voting__getVoteResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBytes()
    );
  }

  try_getVote(_voteId: BigInt): CallResult<Voting__getVoteResult> {
    let result = super.tryCall("getVote", [
      EthereumValue.fromUnsignedBigInt(_voteId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Voting__getVoteResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBytes()
      )
    );
  }

  MODIFY_SUPPORT_ROLE(): Bytes {
    let result = super.call("MODIFY_SUPPORT_ROLE", []);

    return result[0].toBytes();
  }

  try_MODIFY_SUPPORT_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("MODIFY_SUPPORT_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  allowRecoverability(token: Address): boolean {
    let result = super.call("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_allowRecoverability(token: Address): CallResult<boolean> {
    let result = super.tryCall("allowRecoverability", [
      EthereumValue.fromAddress(token)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  appId(): Bytes {
    let result = super.call("appId", []);

    return result[0].toBytes();
  }

  try_appId(): CallResult<Bytes> {
    let result = super.tryCall("appId", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  getInitializationBlock(): BigInt {
    let result = super.call("getInitializationBlock", []);

    return result[0].toBigInt();
  }

  try_getInitializationBlock(): CallResult<BigInt> {
    let result = super.tryCall("getInitializationBlock", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  canPerform(_sender: Address, _role: Bytes, _params: Array<BigInt>): boolean {
    let result = super.call("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);

    return result[0].toBoolean();
  }

  try_canPerform(
    _sender: Address,
    _role: Bytes,
    _params: Array<BigInt>
  ): CallResult<boolean> {
    let result = super.tryCall("canPerform", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromFixedBytes(_role),
      EthereumValue.fromUnsignedBigIntArray(_params)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getEVMScriptRegistry(): Address {
    let result = super.call("getEVMScriptRegistry", []);

    return result[0].toAddress();
  }

  try_getEVMScriptRegistry(): CallResult<Address> {
    let result = super.tryCall("getEVMScriptRegistry", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  voteTime(): BigInt {
    let result = super.call("voteTime", []);

    return result[0].toBigInt();
  }

  try_voteTime(): CallResult<BigInt> {
    let result = super.tryCall("voteTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  CREATE_VOTES_ROLE(): Bytes {
    let result = super.call("CREATE_VOTES_ROLE", []);

    return result[0].toBytes();
  }

  try_CREATE_VOTES_ROLE(): CallResult<Bytes> {
    let result = super.tryCall("CREATE_VOTES_ROLE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  canForward(_sender: Address, param1: Bytes): boolean {
    let result = super.call("canForward", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromBytes(param1)
    ]);

    return result[0].toBoolean();
  }

  try_canForward(_sender: Address, param1: Bytes): CallResult<boolean> {
    let result = super.tryCall("canForward", [
      EthereumValue.fromAddress(_sender),
      EthereumValue.fromBytes(param1)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  canExecute(_voteId: BigInt): boolean {
    let result = super.call("canExecute", [
      EthereumValue.fromUnsignedBigInt(_voteId)
    ]);

    return result[0].toBoolean();
  }

  try_canExecute(_voteId: BigInt): CallResult<boolean> {
    let result = super.tryCall("canExecute", [
      EthereumValue.fromUnsignedBigInt(_voteId)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  canVote(_voteId: BigInt, _voter: Address): boolean {
    let result = super.call("canVote", [
      EthereumValue.fromUnsignedBigInt(_voteId),
      EthereumValue.fromAddress(_voter)
    ]);

    return result[0].toBoolean();
  }

  try_canVote(_voteId: BigInt, _voter: Address): CallResult<boolean> {
    let result = super.tryCall("canVote", [
      EthereumValue.fromUnsignedBigInt(_voteId),
      EthereumValue.fromAddress(_voter)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    let result = super.call("kernel", []);

    return result[0].toAddress();
  }

  try_kernel(): CallResult<Address> {
    let result = super.tryCall("kernel", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  newVote(_executionScript: Bytes, _metadata: string): BigInt {
    let result = super.call("newVote", [
      EthereumValue.fromBytes(_executionScript),
      EthereumValue.fromString(_metadata)
    ]);

    return result[0].toBigInt();
  }

  try_newVote(_executionScript: Bytes, _metadata: string): CallResult<BigInt> {
    let result = super.tryCall("newVote", [
      EthereumValue.fromBytes(_executionScript),
      EthereumValue.fromString(_metadata)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  minAcceptQuorumPct(): BigInt {
    let result = super.call("minAcceptQuorumPct", []);

    return result[0].toBigInt();
  }

  try_minAcceptQuorumPct(): CallResult<BigInt> {
    let result = super.tryCall("minAcceptQuorumPct", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isPetrified(): boolean {
    let result = super.call("isPetrified", []);

    return result[0].toBoolean();
  }

  try_isPetrified(): CallResult<boolean> {
    let result = super.tryCall("isPetrified", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  votesLength(): BigInt {
    let result = super.call("votesLength", []);

    return result[0].toBigInt();
  }

  try_votesLength(): CallResult<BigInt> {
    let result = super.tryCall("votesLength", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  newVote1(
    _executionScript: Bytes,
    _metadata: string,
    _castVote: boolean,
    _executesIfDecided: boolean
  ): BigInt {
    let result = super.call("newVote", [
      EthereumValue.fromBytes(_executionScript),
      EthereumValue.fromString(_metadata),
      EthereumValue.fromBoolean(_castVote),
      EthereumValue.fromBoolean(_executesIfDecided)
    ]);

    return result[0].toBigInt();
  }

  try_newVote1(
    _executionScript: Bytes,
    _metadata: string,
    _castVote: boolean,
    _executesIfDecided: boolean
  ): CallResult<BigInt> {
    let result = super.tryCall("newVote", [
      EthereumValue.fromBytes(_executionScript),
      EthereumValue.fromString(_metadata),
      EthereumValue.fromBoolean(_castVote),
      EthereumValue.fromBoolean(_executesIfDecided)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  supportRequiredPct(): BigInt {
    let result = super.call("supportRequiredPct", []);

    return result[0].toBigInt();
  }

  try_supportRequiredPct(): CallResult<BigInt> {
    let result = super.tryCall("supportRequiredPct", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", []);

    return result[0].toAddress();
  }

  try_token(): CallResult<Address> {
    let result = super.tryCall("token", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  PCT_BASE(): BigInt {
    let result = super.call("PCT_BASE", []);

    return result[0].toBigInt();
  }

  try_PCT_BASE(): CallResult<BigInt> {
    let result = super.tryCall("PCT_BASE", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isForwarder(): boolean {
    let result = super.call("isForwarder", []);

    return result[0].toBoolean();
  }

  try_isForwarder(): CallResult<boolean> {
    let result = super.tryCall("isForwarder", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }
}

export class ChangeMinAcceptQuorumPctCall extends EthereumCall {
  get inputs(): ChangeMinAcceptQuorumPctCall__Inputs {
    return new ChangeMinAcceptQuorumPctCall__Inputs(this);
  }

  get outputs(): ChangeMinAcceptQuorumPctCall__Outputs {
    return new ChangeMinAcceptQuorumPctCall__Outputs(this);
  }
}

export class ChangeMinAcceptQuorumPctCall__Inputs {
  _call: ChangeMinAcceptQuorumPctCall;

  constructor(call: ChangeMinAcceptQuorumPctCall) {
    this._call = call;
  }

  get _minAcceptQuorumPct(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMinAcceptQuorumPctCall__Outputs {
  _call: ChangeMinAcceptQuorumPctCall;

  constructor(call: ChangeMinAcceptQuorumPctCall) {
    this._call = call;
  }
}

export class ChangeSupportRequiredPctCall extends EthereumCall {
  get inputs(): ChangeSupportRequiredPctCall__Inputs {
    return new ChangeSupportRequiredPctCall__Inputs(this);
  }

  get outputs(): ChangeSupportRequiredPctCall__Outputs {
    return new ChangeSupportRequiredPctCall__Outputs(this);
  }
}

export class ChangeSupportRequiredPctCall__Inputs {
  _call: ChangeSupportRequiredPctCall;

  constructor(call: ChangeSupportRequiredPctCall) {
    this._call = call;
  }

  get _supportRequiredPct(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeSupportRequiredPctCall__Outputs {
  _call: ChangeSupportRequiredPctCall;

  constructor(call: ChangeSupportRequiredPctCall) {
    this._call = call;
  }
}

export class TransferToVaultCall extends EthereumCall {
  get inputs(): TransferToVaultCall__Inputs {
    return new TransferToVaultCall__Inputs(this);
  }

  get outputs(): TransferToVaultCall__Outputs {
    return new TransferToVaultCall__Outputs(this);
  }
}

export class TransferToVaultCall__Inputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferToVaultCall__Outputs {
  _call: TransferToVaultCall;

  constructor(call: TransferToVaultCall) {
    this._call = call;
  }
}

export class NewVoteCall extends EthereumCall {
  get inputs(): NewVoteCall__Inputs {
    return new NewVoteCall__Inputs(this);
  }

  get outputs(): NewVoteCall__Outputs {
    return new NewVoteCall__Outputs(this);
  }
}

export class NewVoteCall__Inputs {
  _call: NewVoteCall;

  constructor(call: NewVoteCall) {
    this._call = call;
  }

  get _executionScript(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _metadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class NewVoteCall__Outputs {
  _call: NewVoteCall;

  constructor(call: NewVoteCall) {
    this._call = call;
  }

  get voteId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ForwardCall extends EthereumCall {
  get inputs(): ForwardCall__Inputs {
    return new ForwardCall__Inputs(this);
  }

  get outputs(): ForwardCall__Outputs {
    return new ForwardCall__Outputs(this);
  }
}

export class ForwardCall__Inputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }

  get _evmScript(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ForwardCall__Outputs {
  _call: ForwardCall;

  constructor(call: ForwardCall) {
    this._call = call;
  }
}

export class VoteCall extends EthereumCall {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _supports(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _executesIfDecided(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _supportRequiredPct(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minAcceptQuorumPct(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _voteTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class NewVote1Call extends EthereumCall {
  get inputs(): NewVote1Call__Inputs {
    return new NewVote1Call__Inputs(this);
  }

  get outputs(): NewVote1Call__Outputs {
    return new NewVote1Call__Outputs(this);
  }
}

export class NewVote1Call__Inputs {
  _call: NewVote1Call;

  constructor(call: NewVote1Call) {
    this._call = call;
  }

  get _executionScript(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _metadata(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _castVote(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _executesIfDecided(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class NewVote1Call__Outputs {
  _call: NewVote1Call;

  constructor(call: NewVote1Call) {
    this._call = call;
  }

  get voteId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteVoteCall extends EthereumCall {
  get inputs(): ExecuteVoteCall__Inputs {
    return new ExecuteVoteCall__Inputs(this);
  }

  get outputs(): ExecuteVoteCall__Outputs {
    return new ExecuteVoteCall__Outputs(this);
  }
}

export class ExecuteVoteCall__Inputs {
  _call: ExecuteVoteCall;

  constructor(call: ExecuteVoteCall) {
    this._call = call;
  }

  get _voteId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteVoteCall__Outputs {
  _call: ExecuteVoteCall;

  constructor(call: ExecuteVoteCall) {
    this._call = call;
  }
}
